{"version":3,"sources":["components/modal.js","components/tables.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","handleChange","event","setState","table","state","target","id","value","handleDropdown","ltr","up","handleSubmit","preventDefault","modalUpdate","handleReset","className","this","name","onSubmit","onReset","type","start","onChange","width","step","max","defaultValue","Component","Tables","getTable","tableArray","buildTable","rows","Math","ceil","array","length","i","push","y","d","fillRowLTR","fillRowRTL","element","shift","generateArray","a","curr","updateTables","response","parseInt","modal","ready","elements","row","rowElements","style","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"y6BAuHeA,E,YAnHX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAMVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,MAAM,EAAD,GACE,EAAKC,MAAMD,MADb,eAEAF,EAAMI,OAAOC,GAAKL,EAAMI,OAAOE,WAX1B,EAgBlBC,eAAiB,SAACP,GACW,UAAtBA,EAAMI,OAAOE,OACZ,EAAKL,SAAS,CACVC,MAAM,EAAD,GACE,EAAKC,MAAMD,MADb,CAEDM,KAAK,EACLC,IAAI,MAIS,UAAtBT,EAAMI,OAAOE,OACZ,EAAKL,SAAS,CACVC,MAAM,EAAD,GACE,EAAKC,MAAMD,MADb,CAEDM,KAAK,EACLC,IAAI,MAIS,UAAtBT,EAAMI,OAAOE,OACZ,EAAKL,SAAS,CACVC,MAAM,EAAD,GACE,EAAKC,MAAMD,MADb,CAEDM,KAAK,EACLC,IAAI,MAIS,UAAtBT,EAAMI,OAAOE,OACZ,EAAKL,SAAS,CACVC,MAAM,EAAD,GACE,EAAKC,MAAMD,MADb,CAEDM,KAAK,EACLC,IAAI,OAjDF,EAuDlBC,aAAe,SAACV,GACZA,EAAMW,iBACN,EAAKb,MAAMc,YAAY,EAAKT,MAAMD,QAzDpB,EA4DlBW,YAAc,SAACb,GACXA,EAAMW,iBACN,EAAKb,MAAMc,YAAY,OA5DvB,EAAKT,MAAQ,CACTD,MAAQ,EAAKJ,MAAMI,OAHT,E,sEAkEd,OACI,yBAAKY,UAAU,SACX,yBAAKA,UAAU,kBACX,sCAAYC,KAAKZ,MAAMD,MAAMc,MAC7B,0BAAMC,SAAUF,KAAKL,aAAcQ,QAASH,KAAKF,aAC7C,uCACA,2BACIM,KAAK,OACLd,GAAG,QACHC,MAAOS,KAAKZ,MAAMD,MAAMkB,MACxBC,SAAUN,KAAKhB,aACfuB,MAAM,SACR,6BACF,sCACA,2BACIH,KAAK,OACLd,GAAG,OACHC,MAAOS,KAAKZ,MAAMD,MAAMqB,KACxBF,SAAUN,KAAKhB,eACjB,6BACF,qCACA,2BACIoB,KAAK,OACLd,GAAG,MACHC,MAAOS,KAAKZ,MAAMD,MAAMsB,IACxBH,SAAUN,KAAKhB,eACjB,6BACF,uCACA,2BACIoB,KAAK,OACLd,GAAG,QACHC,MAAOS,KAAKZ,MAAMD,MAAMoB,MACxBD,SAAUN,KAAKhB,eACjB,6BACF,2CACA,4BAAQM,GAAG,WAAWoB,aAAa,SAASJ,SAAUN,KAAKR,gBACvD,4BAAQF,GAAG,UAAUC,MAAM,UAA3B,UACA,4BAAQD,GAAG,UAAUC,MAAM,UAA3B,UACA,4BAAQD,GAAG,UAAUC,MAAM,UAA3B,UACA,4BAAQD,GAAG,UAAUC,MAAM,UAA3B,WACK,6BACT,4BAAQa,KAAK,UAAb,UACA,4BAAQA,KAAK,UAAb,iB,GA7GJO,aCiKLC,G,kBA/JX,WAAY7B,GAAQ,IAAD,8BACf,4CAAMA,KAwBV8B,SAAW,WACP,IAAIC,EAAa,EAAKC,aACtB,EAAK7B,SAAS,CACV4B,WAAYA,KA5BD,EAgCnBC,WAAa,WAOT,IANA,IAAItB,EAAM,EAAKL,MAAMK,IACjBC,EAAK,EAAKN,MAAMM,GAChBsB,EAAOC,KAAKC,KAAK,EAAK9B,MAAM+B,MAAMC,OAAS,GAC3CN,EAAa,GACbK,EAAQ,EAAK/B,MAAM+B,MACnBE,EAAI,EACDA,EAAIL,GACPF,EAAWQ,KAAK,IAChBD,IAEJA,EAAI,EACJ,IAAIE,EAAI,KACJC,EAAI,KAQR,IAPG,EAAKpC,MAAMM,IACV6B,EAAIP,EAAK,EACTQ,GAAK,IAELD,EAAI,EACJC,EAAI,GAEDH,EAAIL,GACH,EAAK5B,MAAMK,KACXqB,EAAa,EAAKW,WAAWX,EAAYK,EAAOI,GAChD,EAAKnC,MAAMK,KAAM,IAGjBqB,EAAa,EAAKY,WAAWZ,EAAYK,EAAOI,GAChD,EAAKnC,MAAMK,KAAM,GAErB8B,GAAKC,EACLH,IAIJ,OAFA,EAAKjC,MAAMK,IAAMA,EACjB,EAAKL,MAAMM,GAAKA,EACToB,GAnEQ,EAsEnBW,WAAa,SAACX,EAAYK,EAAOI,GAC7B,IAAI,IAAIF,EAAE,EAAGA,EAAE,EAAGA,IAAI,CAClB,IAAIM,EAAUR,EAAMS,QACpBd,EAAWS,GAAGF,GAAKM,EAEvB,OAAOb,GA3EQ,EA8EnBY,WAAa,SAACZ,EAAYK,EAAOI,GAC7B,IAAI,IAAIF,EAAE,EAAGA,GAAG,EAAGA,IAAI,CACnB,IAAIM,EAAUR,EAAMS,QACpBd,EAAWS,GAAGF,GAAKM,EAEvB,OAAOb,GAnFQ,EAsFnBe,cAtFmB,sBAsFH,kCAAAC,EAAA,sDAKZ,IAJIC,EAAO,EAAK3C,MAAMiB,MAClBG,EAAO,EAAKpB,MAAMoB,KAClBC,EAAM,EAAKrB,MAAMqB,IACjBU,EAAQ,GACNY,GAAQtB,GACVU,EAAMG,KAAKS,GACXA,GAAQvB,EAEZ,KAAMW,EAAMC,OAAS,GAAK,GACtBD,EAAMG,KAAK,MAEf,EAAKpC,SAAS,CACViC,MAAMA,IAbE,2CAtFG,EAuGnBa,aAvGmB,uCAuGJ,WAAOC,GAAP,SAAAH,EAAA,sEACL,EAAK5C,SAAS,CAChBmB,MAAO6B,SAASD,EAAS5B,OACzBG,KAAM0B,SAASD,EAASzB,MACxBC,IAAKyB,SAASD,EAASxB,KACvBF,MAAO2B,SAASD,EAAS1B,OACzBd,IAAKwC,EAASxC,IACdC,GAAIuC,EAASvC,GACbyC,OAAM,IARC,uBAUL,EAAKN,gBAVA,uBAWL,EAAKhB,WAXA,2CAvGI,wDAqHnBhB,YAAc,SAACoC,GACRA,EACC,EAAKD,aAAaC,GAGlB,EAAK/C,SAAS,CACViD,OAAM,KAzHd,EAAK/C,MAAQ,CACTiB,MAAO,EAAKtB,MAAMI,MAAMkB,MACxBG,KAAM,EAAKzB,MAAMI,MAAMqB,KACvBC,IAAK,EAAK1B,MAAMI,MAAMsB,IACtBF,MAAO,EAAKxB,MAAMI,MAAMoB,MACxBd,IAAK,EAAKV,MAAMI,MAAMM,IACtBC,GAAI,EAAKX,MAAMI,MAAMO,GACrBO,KAAM,EAAKlB,MAAMI,MAAMc,KACvBkB,MAAO,GACPL,WAAY,KACZsB,OAAO,EACPD,OAAO,GAbI,E,2MAkBTnC,KAAK6B,gB,uBACL7B,KAAKa,W,uBACLb,KAAKd,SAAS,CAChBkD,OAAO,I,qIA2GL,IAAD,OACL,GAAGpC,KAAKZ,MAAMgD,MAAM,CAChB,IAAMC,EAAW,GADD,uBAEhB,IAAI,IAAJ,IAAiBrC,KAAKZ,MAAM0B,WAA5B,+CAAuC,CAAC,IAA9BwB,EAA6B,QAC7BC,EAAc,GADe,uBAEnC,IAAI,IAAJ,IAAqBD,EAArB,+CAAyB,CAAC,IAAhBX,EAAe,QACrBY,EAAYjB,KAAK,yBAAKvB,UAAU,iBAAiB4B,KAHlB,kFAKnCU,EAASf,KAAK,yBAAKvB,UAAU,aAAawC,KAP9B,kFAShB,OACI,oCACI,yBAAKxC,UAAS,0BAAqBC,KAAKZ,MAAMa,MAAQuC,MAAO,CAACjC,MAAM,GAAD,OAAKP,KAAKZ,MAAMmB,MAAhB,OAC9D8B,EACD,4BAAQI,QAAS,kBAAM,EAAKvD,SAAS,CAAEiD,OAAO,MAA9C,cAGHnC,KAAKZ,MAAM+C,OACR,kBAAC,EAAD,CAAOtC,YAAaG,KAAKH,YAAaV,MAAOa,KAAKZ,SAO9D,OAAO,kC,GA1JEuB,cCwCN+B,E,iLAXX,OACE,yBAAK3C,UAAU,UACb,kBAAC,EAAD,CAAQZ,MA7BG,CACbkB,MAAO,EACPG,KAAM,EACNC,IAAK,GACLF,MAAO,GACPd,KAAK,EACLC,IAAI,EACJO,KAAM,SAuBJ,kBAAC,EAAD,CAAQd,MArBG,CACbkB,MAAO,IACPG,KAAM,EACNC,IAAK,IACLF,MAAO,GACPd,KAAK,EACLC,IAAI,EACJO,KAAM,WAeJ,kBAAC,EAAD,CAAQd,MAbG,CACbkB,MAAO,GACPG,KAAM,EACNC,IAAK,GACLF,MAAO,GACPd,KAAK,EACLC,IAAI,EACJO,KAAM,e,GA3BMU,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcjB,MAAMkB,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c24ec02.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './modal.css';\n\nclass Modal extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            table : this.props.table\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            table: {\n                ...this.state.table,\n                [event.target.id]: event.target.value\n            }\n        });\n    }\n\n    handleDropdown = (event) => {\n        if(event.target.value == \"ltr-dn\"){\n            this.setState({\n                table: {\n                    ...this.state.table,\n                    ltr: true,\n                    up: false\n                }\n            })\n        }\n        if(event.target.value == \"ltr-up\"){\n            this.setState({\n                table: {\n                    ...this.state.table,\n                    ltr: true,\n                    up: true\n                }\n            })\n        }\n        if(event.target.value == \"rtl-dn\"){\n            this.setState({\n                table: {\n                    ...this.state.table,\n                    ltr: false,\n                    up: false\n                }\n            })\n        }\n        if(event.target.value == \"rtl-up\"){\n            this.setState({\n                table: {\n                    ...this.state.table,\n                    ltr: false,\n                    up: true\n                }\n            })\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.modalUpdate(this.state.table);\n    }\n\n    handleReset = (event) => {\n        event.preventDefault();\n        this.props.modalUpdate(null);\n    }\n\n    render(){\n        return(\n            <div className=\"modal\">\n                <div className=\"modal-contents\">\n                    <h3>Table: {this.state.table.name}</h3>\n                    <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                        <span>Start</span>\n                        <input\n                            type=\"text\"\n                            id=\"start\"\n                            value={this.state.table.start}\n                            onChange={this.handleChange}\n                            width=\"10px\"\n                        /><br/>\n                        <span>Step</span>\n                        <input\n                            type=\"text\"\n                            id=\"step\"\n                            value={this.state.table.step}\n                            onChange={this.handleChange}\n                        /><br/>\n                        <span>Max</span>\n                        <input\n                            type=\"text\"\n                            id=\"max\"\n                            value={this.state.table.max}\n                            onChange={this.handleChange}\n                        /><br/>\n                        <span>Width</span>\n                        <input\n                            type=\"text\"\n                            id=\"width\"\n                            value={this.state.table.width}\n                            onChange={this.handleChange}\n                        /><br/>\n                        <span>Direction</span>\n                        <select id=\"dropdown\" defaultValue=\"ltr-dn\" onChange={this.handleDropdown}>\n                            <option id=\"default\" value=\"ltr-dn\" >ltr-dn</option>\n                            <option id=\"default\" value=\"ltr-up\" >ltr-up</option>\n                            <option id=\"default\" value=\"rtl-dn\" >rtl-dn</option>\n                            <option id=\"default\" value=\"rtl-up\" >rtl-up</option>\n                        </select><br/>\n                        <button type=\"submit\">Submit</button>\n                        <button type=\"cancel\">Cancel</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Modal;","import React, { Component } from 'react';\nimport Modal from './modal'\nimport './tables.css';\n\nclass Tables extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            start: this.props.table.start,\n            step: this.props.table.step,\n            max: this.props.table.max,\n            width: this.props.table.width,\n            ltr: this.props.table.ltr,\n            up: this.props.table.up,\n            name: this.props.table.name,\n            array: [],\n            tableArray: null,\n            ready: false,\n            modal: false,\n        }\n    }\n\n    async componentDidMount() {\n        await this.generateArray();\n        await this.getTable();\n        await this.setState({\n            ready: true\n        })\n    }\n\n    getTable = () => {\n        let tableArray = this.buildTable()\n        this.setState({\n            tableArray: tableArray\n        });\n    }\n\n    buildTable = () => {\n        let ltr = this.state.ltr;\n        let up = this.state.up;\n        let rows = Math.ceil(this.state.array.length / 5);\n        let tableArray = [];\n        let array = this.state.array;\n        let i = 0;\n        while (i < rows){\n            tableArray.push([]);\n            i++;\n        }\n        i = 0;\n        let y = null;\n        let d = null;\n        if(this.state.up){\n            y = rows-1;\n            d = -1;\n        } else {\n            y = 0;\n            d = 1\n        }\n        while (i < rows){\n            if (this.state.ltr) {\n                tableArray = this.fillRowLTR(tableArray, array, y);\n                this.state.ltr = false;\n            }\n            else {\n                tableArray = this.fillRowRTL(tableArray, array, y);\n                this.state.ltr = true;\n            }\n            y += d;\n            i++;\n        }\n        this.state.ltr = ltr;\n        this.state.up = up;\n        return tableArray;\n    }\n\n    fillRowLTR = (tableArray, array, y) => {\n        for(let i=0; i<5; i++){\n            let element = array.shift()\n            tableArray[y][i] = element;\n        }\n        return tableArray;\n    }\n\n    fillRowRTL = (tableArray, array, y) => {\n        for(let i=4; i>=0; i--){\n            let element = array.shift()\n            tableArray[y][i] = element;\n            }            \n        return tableArray;\n    }\n\n    generateArray = async () => {\n        let curr = this.state.start;\n        let step = this.state.step;\n        let max = this.state.max;\n        let array = [];\n        while(curr <= max){\n            array.push(curr);\n            curr += step;\n        }\n        while(array.length % 5 != 0){\n            array.push(null);\n        }\n        this.setState({\n            array:array\n        });\n    }\n\n    updateTables = async (response) => {\n        await this.setState({\n            start: parseInt(response.start),\n            step: parseInt(response.step),\n            max: parseInt(response.max),\n            width: parseInt(response.width),\n            ltr: response.ltr,\n            up: response.up,\n            modal:false,\n        });\n        await this.generateArray();\n        await this.getTable();\n    }\n\n    modalUpdate = (response) => {\n        if(response){\n            this.updateTables(response);\n        }\n        else{\n            this.setState({\n                modal:false\n            })\n        }\n    }\n\n    render() {\n        if(this.state.ready){\n            const elements = [];\n            for(const row of this.state.tableArray){\n                const rowElements = []\n                for(const element of row){\n                    rowElements.push(<div className='table-element'>{element}</div>)\n                }\n                elements.push(<div className='table-row'>{rowElements}</div>);\n            }\n            return(\n                <>\n                    <div className={`table-container ${this.state.name}`} style={{width: `${this.state.width}%`}}>\n                        {elements}\n                        <button onClick={() => this.setState({ modal: true })}>Configure</button>    \n                    </div>\n                    \n                    {this.state.modal &&\n                        <Modal modalUpdate={this.modalUpdate} table={this.state}/>\n                    }\n                </>\n\n\n            )\n        } else {\n            return(<div></div>)            \n        }\n\n    }\n}\n\nexport default Tables;","import React, {Component} from 'react';\nimport './App.css';\nimport Tables from './components/tables'\n\nclass App extends Component {\n  render(){\n    const tableA = {\n      start: 8,\n      step: 1,\n      max: 29,\n      width: 20,\n      ltr: true,\n      up: true,\n      name: \"RED\"\n    };\n    const tableB = {\n      start: 231,\n      step: 1,\n      max: 247,\n      width: 30,\n      ltr: true,\n      up: true,\n      name: \"GREEN\"\n    };\n    const tableC = {\n      start: 47,\n      step: 2,\n      max: 81,\n      width: 40,\n      ltr: false,\n      up: true,\n      name: \"BLUE\"\n    };\n    return (\n      <div className=\"tables\">\n        <Tables table={tableA}/>\n        <Tables table={tableB}/>\n        <Tables table={tableC}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}